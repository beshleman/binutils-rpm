diff -Nrup a/bfd/bfd-in2.h b/bfd/bfd-in2.h
--- a/bfd/bfd-in2.h	2014-08-21 16:03:53.583828269 -0400
+++ b/bfd/bfd-in2.h	2014-08-21 15:59:59.969022057 -0400
@@ -6707,7 +6707,8 @@ typedef struct bfd_target
   /* Indicate that we are only retrieving symbol values from this section.  */
   void        (*_bfd_link_just_syms) (asection *, struct bfd_link_info *);
 
-  /* Copy the symbol type of a linker hash table entry.  */
+  /* Copy the symbol type and other attributes for a linker script
+     assignment of one symbol to another.  */
 #define bfd_copy_link_hash_symbol_type(b, t, f) \
   BFD_SEND (b, _bfd_copy_link_hash_symbol_type, (b, t, f))
   void (*_bfd_copy_link_hash_symbol_type)
diff -Nrup a/bfd/elflink.c b/bfd/elflink.c
--- a/bfd/elflink.c	2014-08-21 16:03:53.729901009 -0400
+++ b/bfd/elflink.c	2014-08-21 15:59:59.983030963 -0400
@@ -13156,17 +13156,24 @@ _bfd_elf_make_dynamic_reloc_section (ase
   return reloc_sec;
 }
 
-/* Copy the ELF symbol type associated with a linker hash entry.  */
+/* Copy the ELF symbol type and other attributes for a linker script
+   assignment from HSRC to HDEST.  Generally this should be treated as
+   if we found a strong non-dynamic definition for HDEST (except that
+   ld ignores multiple definition errors).  */
 void
-_bfd_elf_copy_link_hash_symbol_type (bfd *abfd ATTRIBUTE_UNUSED,
-    struct bfd_link_hash_entry * hdest,
-    struct bfd_link_hash_entry * hsrc)
-{
-  struct elf_link_hash_entry *ehdest = (struct elf_link_hash_entry *)hdest;
-  struct elf_link_hash_entry *ehsrc = (struct elf_link_hash_entry *)hsrc;
+_bfd_elf_copy_link_hash_symbol_type (bfd *abfd,
+				     struct bfd_link_hash_entry *hdest,
+				     struct bfd_link_hash_entry *hsrc)
+{
+  struct elf_link_hash_entry *ehdest = (struct elf_link_hash_entry *) hdest;
+  struct elf_link_hash_entry *ehsrc = (struct elf_link_hash_entry *) hsrc;
+  Elf_Internal_Sym isym;
 
   ehdest->type = ehsrc->type;
   ehdest->target_internal = ehsrc->target_internal;
+
+  isym.st_other = ehsrc->other;
+  elf_merge_st_other (abfd, ehdest, &isym, TRUE, FALSE);
 }
 
 /* Append a RELA relocation REL to section S in BFD.  */
diff -Nrup a/bfd/linker.c b/bfd/linker.c
--- a/bfd/linker.c	2013-02-27 15:28:03.000000000 -0500
+++ b/bfd/linker.c	2014-08-21 15:59:59.990852110 -0400
@@ -815,14 +815,13 @@ _bfd_generic_link_just_syms (asection *s
   sec->output_offset = sec->vma;
 }
 
-/* Copy the type of a symbol assiciated with a linker hast table entry.
-   Override this so that symbols created in linker scripts get their
-   type from the RHS of the assignment.
+/* Copy the symbol type and other attributes for a linker script
+   assignment from HSRC to HDEST.
    The default implementation does nothing.  */
 void
 _bfd_generic_copy_link_hash_symbol_type (bfd *abfd ATTRIBUTE_UNUSED,
-    struct bfd_link_hash_entry * hdest ATTRIBUTE_UNUSED,
-    struct bfd_link_hash_entry * hsrc ATTRIBUTE_UNUSED)
+    struct bfd_link_hash_entry *hdest ATTRIBUTE_UNUSED,
+    struct bfd_link_hash_entry *hsrc ATTRIBUTE_UNUSED)
 {
 }
 
diff -Nrup a/bfd/targets.c b/bfd/targets.c
--- a/bfd/targets.c	2013-02-27 15:28:03.000000000 -0500
+++ b/bfd/targets.c	2014-08-21 15:59:59.995830496 -0400
@@ -484,7 +484,8 @@ BFD_JUMP_TABLE macros.
 .  {* Indicate that we are only retrieving symbol values from this section.  *}
 .  void        (*_bfd_link_just_syms) (asection *, struct bfd_link_info *);
 .
-.  {* Copy the symbol type of a linker hash table entry.  *}
+.  {* Copy the symbol type and other attributes for a linker script
+.     assignment of one symbol to another.  *}
 .#define bfd_copy_link_hash_symbol_type(b, t, f) \
 .  BFD_SEND (b, _bfd_copy_link_hash_symbol_type, (b, t, f))
 .  void (*_bfd_copy_link_hash_symbol_type)
diff -Nrup a/ld/testsuite/ld-powerpc/defsym.d b/ld/testsuite/ld-powerpc/defsym.d
--- a/ld/testsuite/ld-powerpc/defsym.d	1969-12-31 19:00:00.000000000 -0500
+++ b/ld/testsuite/ld-powerpc/defsym.d	2014-08-21 15:59:59.998828366 -0400
@@ -0,0 +1,26 @@
+#source: defsym.s
+#as: -a64
+#ld: -melf64ppc --defsym bar=foo
+#objdump: -Dr
+
+.*:     file format elf64-powerpc.*
+
+Disassembly of section \.text:
+
+0+100000b0 <_start>:
+    100000b0:	(15 00 00 48|48 00 00 15) 	bl      100000c4 <(foo|bar)\+0x8>
+    100000b4:	(11 00 00 48|48 00 00 11) 	bl      100000c4 <(foo|bar)\+0x8>
+    100000b8:	(00 00 00 60|60 00 00 00) 	nop
+
+0+100000bc <(foo|bar)>:
+    100000bc:	(02 10 40 3c|3c 40 10 02) 	lis     r2,4098
+    100000c0:	(c8 80 42 38|38 42 80 c8) 	addi    r2,r2,-32568
+    100000c4:	(20 00 80 4e|4e 80 00 20) 	blr
+
+Disassembly of section \.data:
+
+0+100100c8 .*:
+    100100c8:	(bc 00 00 10|00 00 00 00) 	.*
+    100100cc:	(00 00 00 00|10 00 00 bc) 	.*
+    100100d0:	(bc 00 00 10|00 00 00 00) 	.*
+    100100d4:	(00 00 00 00|10 00 00 bc) 	.*
diff -Nrup a/ld/testsuite/ld-powerpc/defsym.s b/ld/testsuite/ld-powerpc/defsym.s
--- a/ld/testsuite/ld-powerpc/defsym.s	1969-12-31 19:00:00.000000000 -0500
+++ b/ld/testsuite/ld-powerpc/defsym.s	2014-08-21 15:59:59.999832192 -0400
@@ -0,0 +1,19 @@
+ .text
+ .globl _start
+_start:
+ bl foo
+ bl bar
+ nop
+
+ .globl foo
+ .type foo,@function
+foo:
+ addis 2,12,.TOC.-foo@ha
+ addi 2,2,.TOC.-foo@l
+ .localentry foo,.-foo
+ blr
+ .size foo,.-foo
+
+ .data
+ .dc.a foo
+ .dc.a bar
diff -Nrup a/ld/testsuite/ld-powerpc/powerpc.exp b/ld/testsuite/ld-powerpc/powerpc.exp
--- a/ld/testsuite/ld-powerpc/powerpc.exp	2014-08-21 16:03:53.866828736 -0400
+++ b/ld/testsuite/ld-powerpc/powerpc.exp	2014-08-21 16:06:09.309893786 -0400
@@ -275,6 +275,7 @@ if [ supports_ppc64 ] then {
     run_dump_test "elfv2exe"
     run_dump_test "ambiguousv1"
     run_dump_test "ambiguousv2"
+    run_dump_test "defsym"
 }
 
 if { [istarget "powerpc*-eabi*"] } {
